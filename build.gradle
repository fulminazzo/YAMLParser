plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.freefair.lombok' version '8.4'
}

group = 'it.fulminazzo'
version = '1.6.4'

repositories {
    mavenCentral()
    maven { url = "https://repo.fulminazzo.it/releases" }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.jetbrains:annotations:24.1.0'

    implementation 'org.yaml:snakeyaml:2.2'
    api 'it.fulminazzo:FulmiCollection:1.8.1'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'

    testImplementation 'org.mockito:mockito-core:4.11.0'
}

test {
    useJUnitPlatform()
}

shadowJar {
    exclude("META-INF/**")
    archiveFileName = "${project.name}-${project.version}.jar"
    manifest {
        attributes ("Manifest-Version": "${project.version}")
    }
    minimize()
}

jar {
    manifest {
        attributes(
                "Main-Class": "${project.group}.${project.name.toLowerCase()}.YAMLMain",
                "Manifest-Version": "${project.version}"
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}-${project.version}-original.jar"
    dependsOn(shadowJar)
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.delombokTask
    archiveClassifier = 'sources'
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            url "https://repo.fulminazzo.it/releases"
            credentials {
                username = System.getenv("REPO_USERNAME")
                password = System.getenv("REPO_PASSWORD")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}